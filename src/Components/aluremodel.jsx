/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 boat.glb --transform --keepmeshes
*/

import React, { useEffect, useRef, useState, useMemo } from "react";
import { useGLTF } from "@react-three/drei";
import gsap from "gsap";
import { useThree } from "@react-three/fiber";
import useColorStore from "../Utils/store";
import * as THREE from "three";
import { secondaryInteriorColorCodes } from "../Constants/alure";

const getTexture = (path) => {
  const texture = new THREE.TextureLoader().load(path);
  texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
  texture.anisotropy = 16;

  texture.repeat.set(1, 4);
  return texture;
};
export function Aluremodel(props) {
  const { nodes, materials } = useGLTF("./models/boat-transformed.glb");
  const seamless2 = useMemo(
    () => getTexture("/textures/alure/seamless2.png"),
    []
  );
  const seamless1 = useMemo(
    () => getTexture("/textures/alure/seamless1.png"),
    []
  );
  const { colors, activeState, setActiveState } = useColorStore();
  const { camera } = useThree();
  const primFencRef = useRef();
  const secFencRef = useRef();
  const primIntRef = useRef();
  const secIntRef = useRef();

  const [texture, setTexture] = useState(
    colors["Interior Options"] === "#B8AB9E" ? seamless2 : seamless1
  );
  // useEffect(() => {}, [colors]);

  useEffect(() => {
    switch (activeState) {
      case 0:
        gsap.to(camera.position, {
          x: 100,
          y: 50,
          z: 100,
          duration: 2,
          ease: "power.easeOut",
          onComplete: () => {
            setTimeout(() => {}, 100);
          },
          onStart: () => {
            gsap.to(camera.rotation, {
              x: 0,
              y: 0,
              z: 0,
            });
          },
        });
        break;
      case "Exterior Rail":
      case "Secondary Fence":
        gsap.to(camera.position, {
          x: 0,
          y: 16.5,
          z: 62.5,
          duration: 1,
          ease: "power.easeOut",

          onUpdate: () => {
            camera.lookAt(...secFencRef.current.position);
          },
        });
        break;
      case "Interior Options":
        gsap.to(camera.position, {
          x: 62,
          y: 33,
          z: 21.4,
          duration: 2,

          onUpdate: () => {
            camera.lookAt(...primIntRef.current.position);
          },
        });
        break;
      case "Primary Fence":
        gsap.to(camera.position, {
          x: -40,
          y: 8,
          z: 50,
          duration: 2,
          ease: "power.easeOut",

          onUpdate: () => {
            camera.lookAt(...primFencRef.current.position);
          },
        });
        break;

      default:
        break;
    }
  }, [activeState]);

  return (
    <group
      onPointerMissed={() => setActiveState(0)}
      position={[0, 15, 5]}
      {...props}
      dispose={null}
      scale={12}
    >
      <mesh
        name='flooring'
        // material-color={colors["Interior"]}
        geometry={nodes.Flooring.geometry}
        material={materials.Rug_007_material}
        position={[0.392, -0.833, 0]}
      >
        <meshPhysicalMaterial
          map={colors["Interior Options"] === "#B8AB9E" ? seamless2 : seamless1}
          attach='material'
          color={"#ffffff"}
          metalness={0.5}
          roughness={0.5}
        />
      </mesh>
      <mesh
        name='console'
        material-color={colors["Interior Options"]}
        geometry={nodes.Console.geometry}
        material={materials.Plastic_Metallic_white__0}
        position={[1.395, -0.336, 0]}
      />
      <mesh
        name='Exterior Rail'
        ref={secFencRef}
        material-color={colors["Secondary Fence"]}
        geometry={nodes.Exterior_Accent.geometry}
        position={[0.138, -0.77, 0]}
        material={new THREE.MeshBasicMaterial({ color: 0xff0000 })}
        
        receiveShadow
        castShadow
      />

      <mesh
        material-color={colors["Interior Options"]}
        name='Primary Interior'
        ref={primIntRef}
        geometry={nodes.Primary_Interior.geometry}
        material={materials.Leather_white_16_50cm__0}
        position={[0.519, -0.127, 0]}
        rotation={[0, 0, 0.08]}
      />
      <mesh
        name='Primary Fence'
        ref={primFencRef}
        material-color={colors["Primary Fence"]}
        geometry={nodes.Primary_Fence.geometry}
        material={materials.Carpaint_Simple_Signal_Blue__1}
        position={[0.138, -0.77, 0]}
      />
      <group position={[0.019, 0.056, 0]}>
        <mesh
          geometry={nodes["Z-Misc_1"].geometry}
          material={materials.Chrome_Polished__0}
        />
        <mesh
          geometry={nodes["Z-Misc_2"].geometry}
          material={materials.Chrome_Polished__0}
        />
        <mesh geometry={nodes["Z-Misc_3"].geometry} material-color={"#D5E2E6"}>
          <meshPhysicalMaterial
            attach={"material"}
            metalness={0.5}
            roughness={0.5}
            color={"#D5E2E6"}
          />
        </mesh>
        <mesh
          geometry={nodes["Z-Misc_4"].geometry}
          material={materials.Glass_Coated_Red__0}
        />
        <mesh
          geometry={nodes["Z-Misc_5"].geometry}
          material={materials.Aluminum_Anodized_Clear__0}
        />
        <mesh
          geometry={nodes["Z-Misc_6"].geometry}
          material={materials.Iron_Blurry__0}
        />
        <mesh
          material-color={colors["Interior Options"]}
          name='Primary Interior'
          ref={primIntRef}
          geometry={nodes["Z-Misc_7"].geometry}
          material={materials.Plastic_Simple_Blurry_white_1}
        />
        <mesh
          geometry={nodes["Z-Misc_8"].geometry}
          material={materials.Plastic_Simple_Blurry_Black__0}
        />
        <mesh
          geometry={nodes["Z-Misc_9"].geometry}
          material={materials.Plastic_Metallic_Black__0}
        />
        <mesh
          geometry={nodes["Z-Misc_10"].geometry}
          material={materials.Metal}
        />
        <mesh
          geometry={nodes["Z-Misc_11"].geometry}
          material={materials.Plastic_Metallic_Black__0}
        />
        <mesh
          geometry={nodes["Z-Misc_12"].geometry}
          material={materials.Glass_Coated_Green__0}
        />
        <mesh
          geometry={nodes["Z-Misc_13"].geometry}
          material={materials.Plastic_Metallic_Black__0}
        />
        <mesh
          geometry={nodes["Z-Misc_14"].geometry}
          material={materials.Plastic_Metallic_Black__0}
        />
        <mesh
          geometry={nodes["Z-Misc_15"].geometry}
          material={materials.Glass_Tinted_Black__0}
        />
        <mesh
          geometry={nodes["Z-Misc_16"].geometry}
          material={materials.Glass_Window_Neutral__0}
        />
        <mesh
          geometry={nodes["Z-Misc_17"].geometry}
          material={materials.Chrome_Black__0}
        />
        <mesh
          geometry={nodes["Z-Misc_18"].geometry}
          material={materials.Plastic_Metallic_Black__0}
        />
        <mesh
          geometry={nodes["Z-Misc_19"].geometry}
          material={materials.Metal}
        />
        <mesh
          geometry={nodes["Z-Misc_20"].geometry}
          material={materials.Material__1029}
        />
        <mesh
          geometry={nodes["Z-Misc_21"].geometry}
          material={materials.Material__1052}
        />
        <mesh
          geometry={nodes["Z-Misc_22"].geometry}
          material={materials.Metal}
        />
        <mesh
          geometry={nodes["Z-Misc_23"].geometry}
          material={materials.Material__1064}
        />
        <mesh
          geometry={nodes["Z-Misc_24"].geometry}
          material={materials.Material__1076}
        />
        <mesh
          geometry={nodes["Z-Misc_25"].geometry}
          material={materials.Plain_Grey_Velvet_2466039_28cm__0}
        />
        <mesh
          geometry={nodes["Z-Misc_26"].geometry}
          material={materials.Plastic_Metallic_Black__0}
        />
        <mesh
          geometry={nodes["Z-Misc_27"].geometry}
          material={materials.Black_Plastic_mtl__0}
        />
        <mesh
          geometry={nodes["Z-Misc_28"].geometry}
          material={materials.Grey_Plastic_mtl__0}
        />
        <mesh
          geometry={nodes["Z-Misc_29"].geometry}
          material={materials.Plastic_Simple_Blurry_green__0}
        />
        <mesh
          geometry={nodes["Z-Misc_30"].geometry}
          material={materials.Plastic_Simple_Blurry_fullwhite_1}
        />
        <mesh
          geometry={nodes["Z-Misc_31"].geometry}
          material={materials.Waveguide_mtl__0}
        />
        <mesh
          geometry={nodes["Z-Misc_32"].geometry}
          material={materials.Screw_mtl__0}
        />
        <mesh
          geometry={nodes["Z-Misc_33"].geometry}
          material={materials.Controls_mtl__0}
        />
        <mesh
          geometry={nodes["Z-Misc_34"].geometry}
          material={materials.Waveguide_mtl__0}
        />
        <mesh
          geometry={nodes["Z-Misc_35"].geometry}
          material={materials.Screw_mtl__0}
        />
        <mesh
          geometry={nodes["Z-Misc_36"].geometry}
          material={materials.Controls_mtl__0}
        />
      </group>
      <group position={[0.019, 0.056, 0]}>
        <mesh
          geometry={nodes.Railings_1.geometry}
          material={materials.Metal}
          material-color={colors["Exterior Rail"]}
        />
        <mesh geometry={nodes.Railings_2.geometry} material={materials.Metal} />
        <mesh
          geometry={nodes.Railings_3.geometry}
          material={materials.Chrome_Polished__0}
        />
      </group>
      <group position={[0.124, -0.494, 1.114]}>
        <mesh
          material-color={
            secondaryInteriorColorCodes[colors["Interior Options"]]
          }
          name='Secondary Interior'
          ref={secIntRef}
          geometry={nodes.Secondary_Interior_1.geometry}
          material={materials.Leather_grey_16_50cm__0}
        />
        <mesh
          geometry={nodes.Secondary_Interior_2.geometry}
          material={materials.Leather_Black_16_50cm__0}
        />
      </group>
    </group>
  );
}

useGLTF.preload("./models/boat-transformed.glb");

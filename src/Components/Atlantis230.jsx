/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.8 public/models/atlantis230.glb --keepmeshes
*/

import React, { useEffect, useRef, useState, useMemo } from "react";
import { useGLTF } from "@react-three/drei";
import gsap from "gsap";
import { useThree } from "@react-three/fiber";
import useColorStore from "../Utils/store";
import * as THREE from "three";
import { secondaryInteriorColorCodes } from "../Constants/atlantis";

const getTexture = (path) => {
  const texture = new THREE.TextureLoader().load(path);
  texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
  texture.anisotropy = 16;

  texture.repeat.set(1, 4);
  return texture;
};
export default function Atlantismodel(props) {
  const { nodes, materials } = useGLTF("./models/atlantis230.glb");
  const { colors, activeState } = useColorStore();
  const stripe1 = useMemo(() => getTexture("/textures/plankshadow.jpg"), []);
  const seamless = useMemo(() => getTexture("/textures/seamless.png"), []);

  // const [texture, setTexture] = useState(
  //   colors["Interior Options"] === "#B8AB9E" ? stripe1 : seamless
  // );

  // useEffect(() => {
  //   setTexture(colors["Interior Options"] === "#B8AB9E" ? stripe1 : seamless);
  // }, [colors]);

  const [texture, setTexture] = useState(
    colors["Interior Options"] === "#B8AB9E"
      ? stripe1
      : colors["Interior Options"] === "#878787"
      ? seamless
      : colors["Interior Options"] === "#9C6B3E"
      ? stripe1
      : seamless // Replace "XXXXXX" and "YYYYYY" with your other color codes
  );
  
  useEffect(() => {
    setTexture(
      colors["Interior Options"] === "#B8AB9E"
        ? stripe1
        : colors["Interior Options"] === "#878787"
        ? seamless
        : colors["Interior Options"] === "#9C6B3E"
        ? stripe1
        : seamless // Replace "XXXXXX" and "YYYYYY" with your other color codes
    );
  }, [colors]);

  const { camera } = useThree();
  const primFencRef = useRef();
  const secFencRef = useRef();
  const primIntRef = useRef();
  const exteriorRailRef = useRef();

  useEffect(() => {
    switch (activeState) {
      case 0:
        gsap.to(camera.position, {
          x: 100,
          y: 50,
          z: 100,
          duration: 2,
          ease: "power.easeOut",
          onComplete: () => {
            setTimeout(() => {}, 100);
          },
          onStart: () => {
            gsap.to(camera.rotation, {
              x: 0,
              y: 0,
              z: 0,
            });
          },
        });
        break;
      case "Exterior Rail":
      case "Secondary Fence":
        gsap.to(camera.position, {
          x: 0,
          y: 16.5,
          z: 62.5,
          duration: 1,
          ease: "power.easeOut",

          onUpdate: () => {
            camera.lookAt(...secFencRef.current.position);
          },
        });
        break;
      case "Interior Options":
        gsap.to(camera.position, {
          x: 62,
          y: 33,
          z: 21.4,
          duration: 2,

          onUpdate: () => {
            camera.lookAt(...primIntRef.current.position);
          },
        });
        break;
      case "Primary Fence":
        gsap.to(camera.position, {
          x: -40,
          y: 8,
          z: 50,
          duration: 2,
          ease: "power.easeOut",

          onUpdate: () => {
            camera.lookAt(...primFencRef.current.position);
          },
        });
        break;

      default:
        break;
    }
  }, [activeState]);

  return (
    <group {...props} dispose={null} scale={12} position={[0, 5, 0]}>
      <group position={[0.067, 0.724, 0]}>
        <mesh
          name="Primary Fence"
          ref={primFencRef}
          material-color={colors["Primary Fence"]}
          geometry={nodes.StaticMeshActor_0_StaticMeshComponent0.geometry}
          material={materials.Carpaint_Simple_White__0}
          position={[0.424, -0.216, 0.001]}
        />
        <mesh
          name="Secondary Fence"
          ref={secFencRef}
          material-color={colors["Secondary Fence"]}
          geometry={nodes.StaticMeshActor_1_StaticMeshComponent0.geometry}
          material={materials.Carpaint_Simple_Whitegold__0}
          position={[2.029, -0.207, -0.007]}
        />
        <mesh
          geometry={nodes.StaticMeshActor_2_StaticMeshComponent0.geometry}
          material={materials.Material__1600}
          position={[0.325, -0.784, 0]}
          scale={[1, 1.511, 1]}
          name="flooring"
        >
          <meshPhysicalMaterial
            map={texture}
            attach="material"
            color={"#ffffff"}
            metalness={0.5}
            roughness={0.5}
          />
        </mesh>
        <mesh
          name="console"
          material-color={colors["Interior Options"]}
          geometry={nodes.StaticMeshActor_3_StaticMeshComponent0.geometry}
          material={materials.Plastic_Metallic_white__0}
          position={[1.152, -0.724, 0.584]}
        />
        <mesh
          geometry={nodes.StaticMeshActor_4_StaticMeshComponent0.geometry}
          material={materials.Plastic_Simple_Blurry_cream__0}
          position={[1.378, -0.724, 0]}
          scale={[1.001, 1.002, 1.011]}
        />
        <group position={[0.424, -0.216, 0.001]} scale={[1, 0.83, 1]}>
          <mesh
            name="Primary Interior"
            ref={primIntRef}
            material-color={colors["Interior Options"]}
            geometry={nodes.Primary_Interior.geometry}
            material={materials.Leather_yellow_16_50cm__01}
          />
          <mesh
            geometry={nodes.Primary_Interior_1.geometry}
            material={materials.Leather_Black_16_50cm__0}
          />
          <mesh
            geometry={nodes.Primary_Interior_2.geometry}
            material={materials.Plastic_Simple_Blurry_Black__0}
          />
          <mesh
            geometry={nodes.Primary_Interior_3.geometry}
            material={materials.WorldGridMaterial}
          />
        </group>
        <group position={[0.325, -0.784, 0]} scale={[1, 1.511, 1]}>
          <mesh
            geometry={nodes.Z_Misc.geometry}
            material={materials.Silver_Blurry__0}
          />
          <mesh
            geometry={nodes.Z_Misc_1.geometry}
            material={materials.Aluminum_Blurry__0}
          />
          <mesh
            name="Exterior Rail"
            ref={exteriorRailRef}
            material-color={colors["Exterior Rail"]}
            geometry={nodes.Z_Misc_2.geometry}
            material={materials.Iron_Blurry__0}
          />
          <mesh
            geometry={nodes.Z_Misc_3.geometry}
            material={materials.Aluminum_Blurry__01}
          />
          <mesh
            geometry={nodes.Z_Misc_4.geometry}
            material={materials.Aluminum_Polished__0}
          />
          <mesh
            geometry={nodes.Z_Misc_5.geometry}
            material={materials.Glass_Coated_Red__0}
          />
          <mesh
            geometry={nodes.Z_Misc_6.geometry}
            material={materials.Plastic_Simple_Blurry_Black__0_2}
          />
          <mesh
            geometry={nodes.Z_Misc_7.geometry}
            material={materials.Aluminum_Polished__0_2}
          />
          <mesh
            geometry={nodes.Z_Misc_8.geometry}
            material={materials.Plastic_Simple_Blurry_Black__0_3}
          />
          <mesh
            geometry={nodes.Z_Misc_9.geometry}
            material={materials.Plastic_Metallic_Black__0}
          />
          <mesh
            geometry={nodes.Z_Misc_10.geometry}
            material={materials.Glass_Coated_Green__0}
          />
          <mesh
            geometry={nodes.Z_Misc_11.geometry}
            material={materials.Aluminum_Polished__01}
          />
          <mesh
            geometry={nodes.Z_Misc_12.geometry}
            material={materials.Aluminum_Anodized_Clear__0}
          />
          <mesh
            geometry={nodes.Z_Misc_13.geometry}
            material={materials.WorldGridMaterial}
          />
          <mesh
            geometry={nodes.Z_Misc_14.geometry}
            material={materials.WorldGridMaterial}
          />
          <mesh
            geometry={nodes.Z_Misc_15.geometry}
            material={materials.WorldGridMaterial}
          />
          <mesh
            geometry={nodes.Z_Misc_16.geometry}
            material={materials.Laminate_D02_120cm__0}
          />
          <mesh
            geometry={nodes.Z_Misc_17.geometry}
            material={materials.Chrome_Polished__01}
          />
          <mesh
            geometry={nodes.Z_Misc_18.geometry}
            material={materials.Plastic_Metallic_Black__01}
          />
          <mesh
            geometry={nodes.Z_Misc_19.geometry}
            material={materials.Glass_Window_Neutral__0}
          />
          <mesh
            geometry={nodes.Z_Misc_20.geometry}
            material={materials.Glass_Tinted_Black__0}
          />
          <mesh
            geometry={nodes.Z_Misc_21.geometry}
            material={materials.Silk_03_Gray_6cm__0}
          />
          <mesh
            geometry={nodes.Z_Misc_22.geometry}
            material={materials.Iron_Blurry__0_2}
          />
          <mesh
            geometry={nodes.Z_Misc_23.geometry}
            material={materials.Plastic_Simple_Blurry_Black__0}
          />
          <mesh
            geometry={nodes.Z_Misc_24.geometry}
            material={materials.WorldGridMaterial}
          />
          <mesh
            geometry={nodes.Z_Misc_25.geometry}
            material={materials.Metallic_Paint_Bronze_Dark__0}
          />
          <mesh
            geometry={nodes.Z_Misc_26.geometry}
            material={materials.Glass_Tinted_Blue__0}
          />
          <mesh
            geometry={nodes.Z_Misc_27.geometry}
            material={materials.Plastic_Simple_Blurry_Black__0_4}
          />
          <mesh
            geometry={nodes.Z_Misc_28.geometry}
            material={materials.Aluminum_Anodized_Clear__0_2}
          />
          <mesh
            geometry={nodes.Z_Misc_29.geometry}
            material={materials.Iron_Blurry__0_3}
          />
          <mesh
            geometry={nodes.Z_Misc_30.geometry}
            material={materials.Aluminum_Polished__011}
          />
          <mesh
            geometry={nodes.Z_Misc_31.geometry}
            material={materials.Chrome_Polished__011}
          />
          <mesh
            geometry={nodes.Z_Misc_32.geometry}
            material={materials.Chrome_Polished__0}
          />
          <mesh
            geometry={nodes.Z_Misc_33.geometry}
            material={materials.Plastic_Metallic_white__01}
          />
          <mesh
            geometry={nodes.Z_Misc_34.geometry}
            material={materials.Black_Plastic_mtl__0}
          />
          <mesh
            geometry={nodes.Z_Misc_35.geometry}
            material={materials.Grey_Plastic_mtl__0}
          />
          <mesh
            geometry={nodes.Z_Misc_36.geometry}
            material={materials.Glass_Tinted_Blue__1}
          />
        </group>
        <group
          position={[0.424, -0.216, 0.001]}
          rotation={[0, -0.698, 0]}
          scale={[1.04, 1.172, 1]}
        >
          <mesh
            name="Secondary Interior Vinyl"
            material-color={secondaryInteriorColorCodes[colors["Interior Options"]]}
            geometry={nodes.Secondary_Interior.geometry}
            material={materials.Leather_kabul_16_50cm__0}
          />
          <mesh
            name="Secondary Interior Vinyl"
            material-color={secondaryInteriorColorCodes[colors["Interior Options"]]}
            geometry={nodes.Secondary_Interior_1.geometry}
            material={materials.Leather_Black_16_50cm__0}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("./models/atlantis230.glb");
